/**
* MG M2 Lightning API
* Magento 2.3 API as standalone server
*
* OpenAPI spec version: 0.1.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "Error-response.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

Error_response::Error_response()
{
    m_Message = "";
    m_ErrorsIsSet = false;
    m_Code = 0;
    m_CodeIsSet = false;
    m_ParametersIsSet = false;
    m_Trace = "";
    m_TraceIsSet = false;
    
}

Error_response::~Error_response()
{
}

void Error_response::validate()
{
    // TODO: implement validation
}

nlohmann::json Error_response::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["message"] = ModelBase::toJson(m_Message);
    if(m_ErrorsIsSet)
    {
        val["errors"] = ModelBase::toJson(m_Errors);
    }
    if(m_CodeIsSet)
    {
        val["code"] = m_Code;
    }
    if(m_ParametersIsSet)
    {
        val["parameters"] = ModelBase::toJson(m_Parameters);
    }
    if(m_TraceIsSet)
    {
        val["trace"] = ModelBase::toJson(m_Trace);
    }
    

    return val;
}

void Error_response::fromJson(nlohmann::json& val)
{
    setMessage(val.at("message"));
    if(val.find("errors") != val.end())
    {
        if(!val["errors"].is_null())
        {
            std::shared_ptr<Error_errors> newItem(new Error_errors());
            newItem->fromJson(val["errors"]);
            setErrors( newItem );
        }
        
    }
    if(val.find("code") != val.end())
    {
        setCode(val.at("code"));
    }
    if(val.find("parameters") != val.end())
    {
        if(!val["parameters"].is_null())
        {
            std::shared_ptr<Error_parameters> newItem(new Error_parameters());
            newItem->fromJson(val["parameters"]);
            setParameters( newItem );
        }
        
    }
    if(val.find("trace") != val.end())
    {
        setTrace(val.at("trace"));
        
    }
    
}


std::string Error_response::getMessage() const
{
    return m_Message;
}
void Error_response::setMessage(std::string value)
{
    m_Message = value;
    
}
std::shared_ptr<Error_errors> Error_response::getErrors() const
{
    return m_Errors;
}
void Error_response::setErrors(std::shared_ptr<Error_errors> value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}
bool Error_response::errorsIsSet() const
{
    return m_ErrorsIsSet;
}
void Error_response::unsetErrors()
{
    m_ErrorsIsSet = false;
}
int32_t Error_response::getCode() const
{
    return m_Code;
}
void Error_response::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Error_response::codeIsSet() const
{
    return m_CodeIsSet;
}
void Error_response::unsetCode()
{
    m_CodeIsSet = false;
}
std::shared_ptr<Error_parameters> Error_response::getParameters() const
{
    return m_Parameters;
}
void Error_response::setParameters(std::shared_ptr<Error_parameters> value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}
bool Error_response::parametersIsSet() const
{
    return m_ParametersIsSet;
}
void Error_response::unsetParameters()
{
    m_ParametersIsSet = false;
}
std::string Error_response::getTrace() const
{
    return m_Trace;
}
void Error_response::setTrace(std::string value)
{
    m_Trace = value;
    m_TraceIsSet = true;
}
bool Error_response::traceIsSet() const
{
    return m_TraceIsSet;
}
void Error_response::unsetTrace()
{
    m_TraceIsSet = false;
}

}
}
}
}

