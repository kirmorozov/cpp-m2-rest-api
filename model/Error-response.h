/**
* MG M2 Lightning API
* Magento 2.3 API as standalone server
*
* OpenAPI spec version: 0.1.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * Error_response.h
 *
 * 
 */

#ifndef Error_response_H_
#define Error_response_H_


#include "ModelBase.h"

#include "Error-errors.h"
#include "Error-errors.cpp"
#include <string>

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Error_response
    : public ModelBase
{
public:
    Error_response();
    Error_response(std::string message);
    Error_response(Pistache::Http::Code code, std::string message);
    virtual ~Error_response();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Error_response members

    /// <summary>
    /// Error message
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Error_errors> getErrors() const;
    void setErrors(std::shared_ptr<Error_errors> value);
    bool errorsIsSet() const;
    void unsetErrors();
    /// <summary>
    /// Error code
    /// </summary>
    int32_t getCode() const;
    void setCode(int32_t value);
    bool codeIsSet() const;
    void unsetCode();
    Pistache::Http::Code getHttpCode() const;

    /// <summary>
    /// 
    /// </summary>
    nlohmann::json getParameters() const;
    void setParameters(nlohmann::json& value);
    bool parametersIsSet() const;
    void unsetParameters();
    /// <summary>
    /// Stack trace
    /// </summary>
    std::string getTrace() const;
    void setTrace(std::string value);
    bool traceIsSet() const;
    void unsetTrace();

protected:
    std::string m_Message;

    std::shared_ptr<Error_errors> m_Errors;
    bool m_ErrorsIsSet;
    int32_t m_Code;
    bool m_CodeIsSet;
    nlohmann::json m_Parameters;
    bool m_ParametersIsSet;
    std::string m_Trace;
    bool m_TraceIsSet;
    Pistache::Http::Code _httpCode;
};

}
}
}
}

#endif /* Error_response_H_ */
